 vue跳转不同页面的多种方法？ 
答： <!-- 直接跳转 -->
<router-link to='/testDemo'>
    <button>点击跳转2</button>
</router-link>
 
<!-- 带参数跳转 -->
<router-link :to="{path:'地址',query:{setid:123456}}">
    <button>点击跳转1</button>
</router-link>
 
<router-link :to="{name:'testDemo',params:{setid:1111222}}">
    <button>点击跳转3</button>
</router-link>
----------------------------------------------------------------------------------------------------
2：this.$router.push() 方法
举例：
<template>
    <div id='test'>
        <button @click='goTo()'>点击跳转4</button>
    </div>
</template>
<script>
    export default{
        name:'test',
        methods:{
            goTo(){
                //直接跳转
                this.$router.push('/testDemo');  //通过push进行跳转
		this.$router.replace('/testDemo'); //指定跳转的地址
		this.$router.go(-1);  //跳转到上一次浏览的页面
 
                //带参数跳转
                this.$router.push({path:'/testDemo',query:{setid:123}});   结果为：http://localhost:8080/#/testDemo?setid=123
                this.$router.push({name:'test',params:{setid:111}});   结果为：http://localhost:8080/#/test/111
                this.$router.push({params:{setid:111}});   结果为：http://localhost:8080/#/111 (注意和上一个区别)
		
		区别： 使用path路径跳转，传参必须使用query，使用命名视图跳转 params和query都可以；
		      使用params如果路由路径上没有参数接收 刷新页面数据会丢失，使用query会把参数显示在地址栏路径上，此时刷新数据数据不会丢失
            }
        }
    }
</script>

ps:  $router.push和$router.replace的区别：
    使用push方法的跳转会向 history 栈添加一个新的记录，当我们点击浏览器的返回按钮时可以看到之前的页面。
    使用replace方法不会向 history 添加新记录，而是替换掉当前的 history 记录，即当replace跳转到的网页后，‘后退’按钮不能查看之前的页面。

   
  JS部分：
         
  2、判断数组有哪些方法？
  答：1、 instanceof 操作符判断 
      用法：arr instanceof Array； 
      instanceof 主要是用来判断某个实例是否属于某个对象
      例如：let arr = [];
           console.log(arr instanceof Array);  // true
      2、对象构造函数的 constructor判断
      用法：arr.constructor === Array;
      例如：let arr = [];
           console.log(arr.constructor === Array); // true
      3、Array 原型链上的 isPrototypeOf
      用法：Array.prototype.isPrototypeOf(arr)
      例如：let arr = [];
           console.log(Array.prototype.isPrototypeOf(arr)); // true
      4、Object.prototype.toString
      用法：Object.prototype.toString.call(arr) === '[object Array]'
     例如：let arr = [];
          console.log(Object.prototype.toString.call(arr) === '[object Array]'); // true
      5、Array.isArray
        用法：Array.isArray(arr)  // 此方法为es6新增的
          
   3、 js 数组API:
   
      var a = [1,2], b = [3,4]

     concat();用于两个数组的连接，不会改变原数组，只返回新数组； a.concat(b); //[1,2,3,4]
     join();将数组中的每一项用指定的字符连接起来，不会改变原数组 a.join("-"); //"1-2"

     sort();将数组进行排序，改变原数组，可接受一个比较器函数，如果没有传函数作为参数，则按字符编码进行排序，
     reverse();翻转数组，改变原数组

    slice();截取  从数组中选择一段，作为新数组返回，不会改变原数组；接受两个参数（start, end）如果为负值则倒数，不包括 end 位的值；
    splice();会改变原数组，添加、替换、删除； .splice(index, num, addoption);

    pop();尾部删除
    push();后面添加
    shift();头部删除
    unshift();前面添加 都会改变原数组

    arr.some(function(item,index,arr){
       //条件 return 值
       //依次执行数组中的每个元素，如果有一个元素满足条件就返回 true 否则返回 false
       //遇到满足条件的则不会继续执行下面的循环
       //返回值 true false
       //不会改变原数组
  })

    arr.every(function(item,index,arr){
      //条件 return 值
      //依次执行数组中的每个元素，如果每一个元素满足条件就返回 true 否则返回 false
      //返回值  true false
      //不会改变原数组
 })

    arr.filter(function(item,index,arr){
      //依次执行数组中的每个元素，如果元素满足条件就返回 true 否则返回 false
      //返回值是一个新的数组，如果没有满足条件的返回空数组
      //不会改变原数组
 })

    arr.map(function(item,index,arr){
      //按照原始数组元素顺序依次处理元素,返回相同长度的数组，如果此项没有return,则返回undefined,作为此项的值
     //依次执行数组中的每个元素，对数组中的每个元素进行处理；
     //不会改变原数组，返回一个新数组
     // map()适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。
 })

    arr.forEach(function(item,index,arr){  // 三个参数分别为：当前元素，索引值，加入一个新数组
      // forEach()方法不会返回数据
      // 使用场景：并不打算改变数据的时候，而只是想用数据做一些事情 ，比如存入数据库或则打印出来。
 })     
 
 
 js中Math常用的函数方法有哪些？
  . Math.random   // 生成一个随机数   例：var r = Math.random(); var num = parseInt(Math.random() * 10) // 0~10之间任何一个整数
  . Math.abs   // 获取一个数的绝对值   例：var num = -10; var abs = Math.abs(num) // 10
  . Math.ceil  // 向上取整数   例：var num = 1.1; var result = Math.ceil(num); // 2
  . Math.floor  // 向下取整    例：var num = 1.1; var result = Math.ceil(num); // 1
  . Math.round  //四舍五入     例：var num = 1.4;console.log(Math.round(num)); // 1; var num =1.5; console.log(Math.round(num)) //2
  . Math.pow  // 用于求一个数的几次方 第一个参数是底数 第二个参数是指数  例：var num = Math.pow(2, 8); // 256
  . Math.max  //求所有参数中的最大值  例：var max = Math.max(1, 2, 56, 78, 99, 0, 46, 23); // 99
  . Math.min  //求所有参数中的最小值  例：var max = Math.max(1, 2, 56, 78, 99, 0, 46, 23); // 1
  
  什么是闭包？
  答：能够读取其他函数内部变量的函数。
  
  js中的new做了什么?
  答：1、创建一个新对象；
      2、通过this指向这个新对象；
      3、为这个新对象添加属性；
      4、返回新对象
       
  6、javascript公有属性和私有属性区别？
   答：声明一个函数，在函数内通过this声明的属性就是公有属性，用var声明的属性就是私有属性。
   注：私有变量只能在函数内部使用，外部无法访问；公有属性需要对象实例化后才能访问
   
  7、什么是作用域链？
   答：比如我们创建一个函数a,函数a里面又包含一个函数b，那么现在就有三个作用域
   全局作用域(也就是window里面的) ==> 函数a作用域 ==> 函数b作用域
   作用域的特点就是，先在自己的变量范围中查找（有，则停止，不会再往上走），如果找不到，就会沿作用域往上找。

  8、什么是原型链？
   答： 原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的
   属性，如果我访问被new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，
   这个查找的过程就叫做原型链。
   Object ==> 构造函数1 ==> 构造函数2
   就和css中的继承一样，如果自身没有定义就会继承父元素的样式。
   例子：function a(){};
         a.prototype.name = "追梦子";
         var b = new a()；
         console.log(b.name); //追梦子
	 
  作用域链和原型链的区别？
    答：作用域是对变量而言，原型链是对对象的属性而言；
        作用域链的顶层是window, 原型链的顶层是object
   
  9、什么是函数节流？
   答：函数节流就是针对调用频率比较高的函数，通过设置定时器，让它在执行后间隔一段时间，在进行下一次执行，避免重复频繁的调用导致浏览器性能
   以及ajax重复调用问题。(缺点：重复调用会增加cpu的负担，加载比较慢会导致页面留白)
   最常见的一些需要节流的事件：onresize，scroll，mousemove ,mousehover，因为这些事件会在页面中频繁被触发。
   
   什么是防抖？
   答: 就是在一定的时间内事件只发生一次。比如你点击button按钮，一秒内无论你点击多少次，它都只会触发一次。
    函数节流（throttle）与 函数防抖（debounce）都是为了限制函数的执行次数，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。
   
   10、对JSON的了解？
    答：JSON(全称 JavaScript Object Notation) 是一种轻量级的数据交换格式；
    两个函数：1. JSON.parse(str)   解析JSON字符串，把JSON字符串变成JavaScript值或对象；
             2、JSON.stringify(obj)   将一个JavaScript值(对象或者数组)转换为一个 JSON字符串；
    eval('('＋json＋')')  用eval方法注意加括号 而且这种方式更容易被攻击
    
    11、JS延迟加载的方式有哪些？
     答：JS的延迟加载有助于提高页面的加载速度。
         defer和async、动态创建DOM方式（用得最多）、按需异步载入JS
         defer：延迟脚本。立即下载，但延迟执行（延迟到整个页面都解析完毕后再运行），按照脚本出现的先后顺序执行。
         async：异步脚本。下载完立即执行，但不保证按照脚本出现的先后顺序执行。
   
   12、加法操作表：
       Number + Number -> 加法运算
       Boolean + Number -> 加法 (如： ture + 0 = 1)
       Boolean + Boolean -> 加法 （如：true + true = 2）
       Number + String -> 连接
       String + Boolean -> 连接
       String + String -> 连接
       
   13、常见http状态码？
   答：200  请求成功
       301  永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。
       400  客户端请求的语法错误
       401  请求要求用户的身份认证
       403  拒绝访问
       404  请求资源不存在
       500  服务器内部错误，无法完成请求
       505  服务器不支持请求的HTTP协议的版本，无法完成处理
       
   14、for…in与for…of的区别？
     例：遍历数组                                                  遍历对象                                                         
         var arr1 = ['a', 'b', 'c'];                             var myObject = {"a": 1, "b": 2, "c": 3};
         arr1.name="数组"                                         for (let key in myObject) {                                 
         for (var i in arr1) {                                        console.log(key)  //a,b,c
           console.log(i)  // 0, 1, 2,name                         }
         };                                                      
	      var arr2 = ['a', 'b', 'c'];                               for (let key of myObject) {
        arr1.name="数组"                                              console.log(key)  // myobject is not iterable
        for (var i of arr2) {                                      }
          console.log(i) // a, b, c,undefined
        };
        
     区别点：
      for in遍历的是数组的索引（即键名）；如果遍历的是对象返回的则是对象的key值；如果遍历的是数组返回的则是数组的下标(key)；
      for of 遍历的是数组元素的值；但是不能遍历对象，因为没有迭代器对象；与forEach()不同的是，它可以正确响应break、continue和return语句；
      
   15、举例：
   		eat:  (随便加一个定位符标签)
		
		for (var i = 1; i <= 3; i++) {
		     console.log('开始吃第 ' + i + ' 个包子')
		    for (var j = 1; j <= 3; j++) {
			if (i === 2 && j === 2) {
			    console.log('有虫子, 不吃了')
			    break   //break 只能跳出当前循环,如果此刻条件成立，i=3时不让它执行，我们可以在for 循环语句前面放上一个定位符
			    break eat  // 加入定位符标签后，结束循环，跳转到指定定位符位置
			}
			console.log('    第 ' + i + ' 个包子吃第 ' + j + ' 口')
		    }
		    console.log('第 ' + i + ' 个包子吃完了')
		    console.log('-------------------')
		}
      
     知识点： return 返回的是函数的值；
     	     当在一个函数方法里判断条件后面加return和加break是不一样的，加 return (return中断的是函数)， 加 break（break中断的是循环） 例如：
	     function chibaozi() {
	      for (var i = 1; i <= 3; i++) {
		console.log("开始吃第 " + i + " 个包子");
		if (i == 2) {
		    console.log('有虫子, 不吃了')
		  return 或者 break;
		}
		console.log("第 " + i + " 个包子吃完了");
		console.log("-------------------");
	      }
	    console.log("我会不会显示出来呢")
	    }
	chibaozi();
      
    16、什么叫优雅降级和渐进增强？
      优雅降级：如果用户使用的是老式浏览器，那么代码就会检查并确认它们是否能正常工作。由于IE盒模型布局问题，针对不同版本IE的hack
               实践过优雅降级了,为那些无法支持功能的浏览器增加了候选方案，让它们在旧式浏览器上以某种形式降级体验，不至于完全失效.
	       
      渐进增强：从被所有浏览器支持的功能开始，逐步地添加那些只有新式浏览器才支持的功能，向页面增加无害于基础浏览器的额外样式和功能，
               当浏览器支持时，它们会自动地呈现出来并发挥作用。
      
    17、网站重构的理解？
       简单说就是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。
      
    18、同源策略？
     现在所有支持JavaScript 的浏览器都会使用这个策略。如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。
     所谓同源是指，域名，协议，端口相同。
     非同源受到的限制有：1、cookie不能读取；2、dom无法获得；3、ajax请求不能发送
     
    []== ![]  结果是true
    {}== !{}  结果是false
    
    19、 什么是回流（重排）和重绘？ 
     页面回流： 当render tree(渲染树)中的一部分(或全部)因为元素的规模尺寸，布局，显示或隐藏等发生了改变而引起的页面重构，回流就发生了。     
     重绘：当一个元素自身的宽高，布局，及显示或隐藏没有改变，而只是改变了元素的外观风格的时候，就产生了重绘。
   总结： 回流一定会触发重绘，而重绘不一定会引起回流。
   
   如何避免回流：1、不使用能够触发回流的属性；2、建立一个图层，让回流在图层里面进行，限制回流和重绘的范围，减少浏览器的运算工作量。
   Css是怎么“划分图层”的：在页面加载完dom之后，浏览器会根据自身制定的一些特殊css 属性对页面进行划分为一个个图层。例如position: absolute|fixed 。
   
   有哪些可替换的属性可以优化回流与重绘？
    1、用transform 代替 top，left ，margin-top， margin-left... 这些位移属性；
    2、不要使用 js 代码对dom 元素设置多条样式，选择用一个 className 代替之；
    3、不要在循环内获取dom 的样式;  例如：offsetWidth, offsetHeight, clientWidth, clientHeight... 这些。(浏览器有一个回流的缓冲机制，即多个回流会保存在一个栈里面，
    当这个栈满了浏览器便会一次性触发所有样式的更改且刷新这个栈。但是如果你多次获取这些元素的实际样式，浏览器为了给你一个准确的答案便会不停刷新这个缓冲栈，导致页面回流增加。)
   所以为了避免这个问题，应该用一个变量保存在循环体外。
   4、不要使用table 布局，因为table 的每一个行甚至每一个单元格的样式更新都会导致整个table 重新布局；
   5、动画的速度按照业务按需决定；
   
   20、什么是 16ms 优化？
    大多数设备的刷新频率是 60 次/秒，（1000/60 = 16.6ms）也就说是浏览器对每一帧画面的渲染工作要在 16ms 内完成，超出这个时间，页面的渲染就会出现卡顿现象，影响用户体验。
    
    减少或者避免 layout(布局)，paint(绘制) 可以让页面不卡顿，动画效果更加流畅。
   
   21、移动端1px问题？
    原因：由于不同的手机有不同的像素密度导致的。如果移动显示屏的分辨率始终是普通屏幕的2倍，1px的边框在devicePixelRatio=2的移动显示屏下会显示成2px，所以在高清瓶下看着1px总是感觉变胖了；
    
    解决方法：https://www.jianshu.com/p/3a262758abcf
       
       
   
   
   
   
   
   
   
   
   
   
   
   
   
   
